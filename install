#!/bin/bash
#
# ProcessMaker install script
# Author: PapyPoc
# Version: 1.0.0
# ProcessMaker BPM Core : https://github.com/tomolimo/processmaker-server/releases
# shellcheck disable=SC2034
# shellcheck disable=SC1091
clear
source ./processmaker/conf
source ./processmaker/function
# Vérification des privilèges root
if [[ "$(id -u)" -ne 0 ]]; then
    log_and_display "Ce script doit être exécuté en tant que root"
    exit 1
else
    log_and_display "Privilège Root: OK"
fi
# Vérifier que les fichiers de log sont accessibles
log_and_display "Initialisation des logs..."
touch "$ERROR_LOG" || {
    echo "Erreur : Impossible de créer les fichiers de log." >&2
    exit 1
}
log_and_display "Fichiers de log :"
log_and_display "  - $ERROR_LOG"
# Ouvrir le descripteur de fichier temporaire pour stderr
exec 3>&2
# Rediriger stderr vers un fichier de log
exec 2> >(while read -r line; do
    echo "$(date '+%Y-%m-%d %H:%M:%S') [ERREUR] $line" >> "$ERROR_LOG"
done)
# Source le fichier /etc/os-release pour obtenir les informations de la distribution
source /etc/os-release
# Vérification si la distribution est compatible
if [[ "${ID}" =~ ^(almalinux|centos|rocky|rhel)$ ]]; then
    if compatible "${VERSION_ID}" ALMA_VERSIONS || compatible "${VERSION_ID}" CENTOS_VERSIONS || compatible "${VERSION_ID}" ROCKY_VERSIONS || compatible "${VERSION_ID}" REDHAT_VERSIONS; then
        log_and_display "La version de votre système d'exploitation (${ID} ${VERSION_ID}) est compatible."
    else
        log_and_display "La version de votre système d'exploitation (${ID} ${VERSION_ID}) n'est pas compatible."
        log_and_display "Voulez-vous forcer l'installation ? Attention, si vous choisissez de forcer, c'est à vos risques et périls."
        log_and_display "Êtes-vous sûr de vouloir continuer ? [Oui/Non]"
        read -r response
        case "$response" in
            O|o) log_and_display "Continuing..." ;;
            N|n) log_and_display "Exiting..." ; exit 1 ;;
            *) log_and_display "Réponse non valide. Quitter..." ; exit 1 ;;
        esac
    fi
    # Vérifie si le répertoire existe déjà
    if [ -d "$1" ]; then
        log_and_display "ProcessMaker est déjà installé. Installation annulée."
        sleep 5
        exit 0
    else
        log_and_display "Nouvelle installation : ProcessMaker version $NEW_VERSION"
        log_and_display "Recherche des mises à jour..."
        dnf update -yq || { log_and_display "Erreur lors de la mise à jour." ; exit 1; }
        log_and_display "Application des mises à jour"
        dnf upgrade -yq || { log_and_display "Erreur lors de l'upgrade." ; exit 1; }
        sleep 1
        dnf install -yq https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm || { log_and_display "Erreur lors de l'installation d'epel-release." ; exit 1; }        
        dnf install https://rpms.remirepo.net/enterprise/remi-release-9.rpm
        dnf module reset -yq php nginx nodejs redis || { log_and_display "Erreur lors de la réinitialisation des modules." ; exit 1; }
        dnf module switch-to -y nginx:1.24 nodejs:22 php:remi-7.4 redis:7 || { log_and_display "Erreur lors de la mise à jour des modules." ; exit 1; }
        log_and_display "Activation des mises à jour automatiques"
        dnf install dnf-automatic -yq || { log_and_display "Erreur lors de l'installation de dnf-automatic." ; exit 1; }
        # Configuration des mises à jour automatiques
        sed -i 's/^\(;\?\)\(apply_updates =\).*/\2 yes/' /etc/dnf/automatic.conf
        sed -i 's/^\(;\?\)\(reboot =\).*/\2 when-needed/' /etc/dnf/automatic.conf
        sed -i 's/^\(;\?\)\(upgrade_type =\).*/\2 security/' /etc/dnf/automatic.conf

        mkdir /etc/systemd/system/dnf-automatic.timer.d
        cat > /etc/systemd/system/dnf-automatic.timer.d/override.conf << EOF
[Unit]
Description=dnf-automatic timer
ConditionPathExists=!/run/ostree-booted
Wants=network-online.target

[Timer]
OnCalendar=*-*-* 6:00
RandomizedDelaySec=60m
Persistent=true
EOF
        systemctl enable --now dnf-automatic.timer || { log_and_display "Erreur lors de l'activation de dnf-automatic." ; exit 1; }

        # Installation des extensions PHP
        log_and_display "Installation des services LEMP..."
        dnf install -yq nginx nodejs redis php mysql-server wget phpmyadmin || { log_and_display "Erreur lors de l'installation des paquets nécessaires." ; exit 1; }
        dnf install -yq crontabs logrotate cronie tar perl curl jq || { log_and_display "Erreur lors de l'installation des services LAMP." ; exit 1; }
        sed -i 's/^\(;\?\)\(user =\).*/\2 nginx/' /etc/php-fpm.d/www.conf
        sed -i 's/^\(;\?\)\(group =\).*/\2 nginx/' /etc/php-fpm.d/www.conf
        log_and_display "Installation des extensions PHP"
        dnf install -yq php-gd php-xml php-soap php-mbstring php-ldap php-cli php-curl || { log_and_display "Erreur lors de l'installation des extensions PHP." ; exit 1; }
        # Activation et démarrage des services nécessaires
        log_and_display "Activation et démarrage de MySQL, Nginx et PHP-FPM"
        systemctl enable --now nginx mysqld php-fpm || { log_and_display "Erreur lors de l'activation des services." ; exit 1; }
        firewall-cmd --permanent --zone=public --add-service=http
        firewall-cmd --reload || { log_and_display "Erreur lors de la configuration du pare-feu." ; exit 1; }
        # Configuration de MySQL
        log_and_display "Configuration de MySQL"
        mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '$SQLROOTPWD';" || { log_and_display "Erreur lors de la configuration de MySQL." ; exit 1; }
        #mysql -u root -p"$SQLROOTPWD" -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost';" || { log_and_display "Erreur lors de la gestion des privilèges MySQL." ; exit 1; }
        # Changing the root password
        mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '$SQLROOTPWD';" || { log_and_display "Erreur lors de la gestion des privilèges MySQL.";}
        # Grant privileges to the root user for all database
        mysql -u root -p"$SQLROOTPWD" -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost';" || { log_and_display "Erreur lors de la gestion des privilèges MySQL.";}
        # Remove anonymous users
        mysql -u root -p"$SQLROOTPWD" -e "DELETE FROM user WHERE User='';" || { log_and_display "Erreur lors de la gestion des privilèges MySQL.";}
        # Disallow root login remotely
        mysql -u root -p"$SQLROOTPWD" -e "UPDATE mysql.user SET Host='localhost' WHERE User='root';" || { log_and_display "Erreur lors de la gestion des privilèges MySQL.";}
        # Remove test database and access to it
        mysql -u root -p"$SQLROOTPWD" -e "DROP DATABASE test;" || { log_and_display "Erreur lors de la gestion des privilèges MySQL.";}
        # Reload privilege tables now
        mysql -u root -p"$SQLROOTPWD" -e "FLUSH PRIVILEGES;" || { log_and_display "Erreur lors de la gestion des privilèges MySQL.";}
        # Create a new database
        mysql -u root -p"$SQLROOTPWD" -e "CREATE DATABASE processmaker;" || { log_and_display "Erreur lors de la gestion des privilèges MySQL.";}
        # Create a new user
        mysql -u root -p"$SQLROOTPWD" -e "CREATE USER 'pm_user'@'localhost' IDENTIFIED BY '$SQLPMPWD';" || { log_and_display "Erreur lors de la gestion des privilèges MySQL.";}
        # Grant privileges to the new user for the new database
        mysql -u root -p"$SQLROOTPWD" -e "GRANT ALL PRIVILEGES ON processmaker.* TO 'pm_user'@'localhost';" || { log_and_display "Erreur lors de la gestion des privilèges MySQL.";}
        # Reload privileges
        mysql -u root -p"$SQLROOTPWD" -e "FLUSH PRIVILEGES;" || { log_and_display "Erreur lors de la gestion des privilèges MySQL.";}
        # Grant privileges to the pm_user for database mysql.time_zone_name
        mysql -u root -p"$SQLROOTPWD" -e "GRANT SELECT ON mysql.time_zone_name TO 'pm_user'@'localhost'" || { log_and_display "Erreur lors de la gestion des privilèges MySQL.";}
        # Initialize time zones datas
        log_and_display "Configuration de TimeZone"
        mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root -p"$SQLROOTPWD" mysql
        # Téléchargement et installation de ProcessMaker
        log_and_display "Téléchargement et installation de ProcessMaker..."
        wget -O /tmp/pm-latest.zip "$DOWNLOADLINK" || { log_and_display "Erreur lors du téléchargement de ProcessMaker." ; exit 1; }
        mkdir -p "${REP_PM}"
        tar --strip-components=1 -xzf /tmp/pm-latest.zip -C "${REP_PM}" || { log_and_display "Erreur lors de l'extraction de ProcessMaker." ; exit 1; }
        # Configuration de ProcessMaker et des logs
        log_and_display "Configuration de ProcessMaker..."
        mkdir -p /var/log/processmaker
        chown -R nginx:nginx /var/log/processmaker
        chmod -R 777 /var/log/processmaker
        # Configuration Nginx
        cat > /etc/nginx/conf.d/pm.conf << EOF
server {
    listen       80;
    server_name  pm.lan;
    root         ${REP_PM}/workflow/public_html;


    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    rewrite ^/.*/(.*)$ /glpi/app.php last;

    location ~ [^/]\.php(/|$) {
            # regex to split \$uri to \$fastcgi_script_name and \$fastcgi_path
            fastcgi_split_path_info ^(.+\.php)(/.+)$;

            # Check that the PHP script exists before passing it
            try_files \$fastcgi_script_name =404;

            fastcgi_pass unix:/var/run/php-fpm/www.sock;

            include fastcgi.conf;

            # Bypass the fact that try_files resets \$fastcgi_path_info
            # # see: http://trac.nginx.org/nginx/ticket/321
            set \$path_info \$fastcgi_path_info;
            fastcgi_param PATH_INFO \$path_info;

            # allow directory index
            fastcgi_index index.php;
     }
}
EOF
        # Configuration de la rotation des logs
        cat > /etc/logrotate.d/pm << EOF
/var/log/processmaker/*.log {
    su nginx nginx
    daily
    rotate 14
    compress
    notifempty
    missingok
    create 644 nginx nginx
}
EOF
        chmod 0644 /etc/logrotate.d/pm
        chown root:root /etc/logrotate.d/pm
        chcon system_u:object_r:etc_t:s0 /etc/logrotate.d/pm
        # Permissions et redémarrage des services
        setsebool -P httpd_can_network_connect on
        setsebool -P httpd_can_network_connect_db on
        setsebool -P httpd_can_sendmail on
        semanage fcontext -a -t httpd_sys_rw_content_t "${REP_PM}(/.*)?"
        semanage fcontext -a -t httpd_sys_rw_content_t "/var/log/processmaker(/.*)?"
        restorecon -R "${REP_PM}"
        restorecon -R /var/log/processmaker
        systemctl restart nginx php-fpm || { log_and_display "Erreur lors du redémarrage de Nginx ou PHP-FPM." ; exit 1; }
        log_and_display "Installation et configuration terminées !"
                # display_credentials
        log_and_display "<==========================> Détail de l'installation de ProcessMaker <=================================>"
        log_and_display "ProcessMaker Version: ${NEW_VERSION}"
        log_and_display "Répertoire d'installation de ProcessMaker: ${REP_PM}"
        log_and_display "Il est important d'enregistrer ces informations. Si vous les perdez, elles seront irrécupérables."
        log_and_display ""
        log_and_display "Les comptes utilisateurs par défaut sont :"
        log_and_display "UTILISATEUR  -  MOT DE PASSE       -  ACCES"
        log_and_display "pm           -  ${ADMINPMPWD}       -  compte admin"
        log_and_display ""
        log_and_display "Vous pouvez accéder à la page web de ProcessMaker à partir d'une adresse IP ou d'un nom d'hôte :"
        log_and_display "http://${IPADRESS}" 
        log_and_display ""
        log_and_display "==> Database:"
        log_and_display "Mot de passe root: ${SQLROOTPWD}"
        log_and_display "Mot de passe pm_user: ${SQLPMPWD}"
        log_and_display "Nom de la base de données ProcessMaker: processmaker"
        log_and_display "<===============================================================================================>"
        log_and_display ""
        log_and_display "Si vous rencontrez un problème avec ce script, veuillez le signaler sur GitHub : https://github.com/PapyPoc/glpi_install/issues"
        
        # write_credentials
        cat > /root/sauve_mdp.txt << EOF
 <==========================> Détail de l'installation de ProcessMaker <=================================
 ProcessMaker Version: ${NEW_VERSION}
 Répertoire d'installation de ProcessMaker: ${REP_PM}
 Il est important d'enregistrer ces informations. Si vous les perdez, elles seront irrécupérables.
 
 Les comptes utilisateurs par défaut sont :
 UTILISATEUR       -  MOT DE PASSE       -  ACCES
 pm          -  ${ADMINPMPWD}       -  compte admin
 
 Vous pouvez accéder à la page web de ProcessMaker à partir d'une adresse IP ou d'un nom d'hôte :
 http://${IPADRESS}
 
 ==> Database:
 Mot de passe root: ${SQLROOTPWD}
 Mot de passe pm_user: ${SQLPMPWD}
 Nom de la base de données ProcessMaker: processmaker
 <===============================================================================================>
 
 Si vous rencontrez un probléme avec ce script, veuillez le signaler sur GitHub : https://github.com/PapyPoc/glpi_install/issues
EOF
        chmod 700 /root/sauve_mdp.txt
        log_and_display ""
        log_and_display "Fichier de sauve_mdp.txt enregistrer dans /home"
        log_and_display ""
        # Vérifie si le répertoire existe
        #if [ -e "$REP_SCRIPT" ]; then
        #        log_and_display "Le script est déjà présent."
        #        log_and_display "Effacement en cours"
        #        rm -Rf "$REP_SCRIPT"
        #fi
    fi
fi
# Restaurer les flux de sortie à leur état initial
exec 2>&3
